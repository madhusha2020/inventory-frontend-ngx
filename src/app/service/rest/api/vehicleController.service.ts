/**
 * Water Solution Inventory Spring Boot App
 * Spring Boot REST API
 *
 * OpenAPI spec version: 1.0
 * Contact: watersolution@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { FacilityList } from '../model/facilityList';
import { TransactionRequest } from '../model/transactionRequest';
import { Vehicle } from '../model/vehicle';
import { VehicleFacility } from '../model/vehicleFacility';
import { VehicleFacilityList } from '../model/vehicleFacilityList';
import { VehicleList } from '../model/vehicleList';
import { VehicleTypeList } from '../model/vehicleTypeList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VehicleControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Activate vehicle
     * 
     * @param transactionRequest transactionRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activateVehicleUsingPUT(transactionRequest: TransactionRequest, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;
    public activateVehicleUsingPUT(transactionRequest: TransactionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;
    public activateVehicleUsingPUT(transactionRequest: TransactionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;
    public activateVehicleUsingPUT(transactionRequest: TransactionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (transactionRequest === null || transactionRequest === undefined) {
            throw new Error('Required parameter transactionRequest was null or undefined when calling activateVehicleUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Vehicle>(`${this.basePath}/vehicle/activate`,
            transactionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View a list of available vehicle facilities
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllVehicleFacilitiesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<FacilityList>;
    public getAllVehicleFacilitiesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FacilityList>>;
    public getAllVehicleFacilitiesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FacilityList>>;
    public getAllVehicleFacilitiesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<FacilityList>(`${this.basePath}/vehicle/facilities`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View a list of available vehicle types
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllVehicleTypesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<VehicleTypeList>;
    public getAllVehicleTypesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleTypeList>>;
    public getAllVehicleTypesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleTypeList>>;
    public getAllVehicleTypesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<VehicleTypeList>(`${this.basePath}/vehicle/types`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View a list of available vehicles
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllVehiclesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<VehicleList>;
    public getAllVehiclesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleList>>;
    public getAllVehiclesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleList>>;
    public getAllVehiclesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<VehicleList>(`${this.basePath}/vehicle/vehicles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get vehicle facility by id
     * 
     * @param facilityId facilityId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVehicleFacilityUsingGET(facilityId: string, observe?: 'body', reportProgress?: boolean): Observable<VehicleFacility>;
    public getVehicleFacilityUsingGET(facilityId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleFacility>>;
    public getVehicleFacilityUsingGET(facilityId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleFacility>>;
    public getVehicleFacilityUsingGET(facilityId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (facilityId === null || facilityId === undefined) {
            throw new Error('Required parameter facilityId was null or undefined when calling getVehicleFacilityUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<VehicleFacility>(`${this.basePath}/vehicle/facility/${encodeURIComponent(String(facilityId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get vehicle by id
     * 
     * @param vehicleId vehicleId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVehicleUsingGET(vehicleId: string, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;
    public getVehicleUsingGET(vehicleId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;
    public getVehicleUsingGET(vehicleId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;
    public getVehicleUsingGET(vehicleId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleId === null || vehicleId === undefined) {
            throw new Error('Required parameter vehicleId was null or undefined when calling getVehicleUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Vehicle>(`${this.basePath}/vehicle/vehicle/${encodeURIComponent(String(vehicleId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Save vehicle facility
     * 
     * @param vehicleFacility vehicleFacility
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveVehicleFacilityUsingPOST(vehicleFacility: VehicleFacility, observe?: 'body', reportProgress?: boolean): Observable<VehicleFacility>;
    public saveVehicleFacilityUsingPOST(vehicleFacility: VehicleFacility, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleFacility>>;
    public saveVehicleFacilityUsingPOST(vehicleFacility: VehicleFacility, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleFacility>>;
    public saveVehicleFacilityUsingPOST(vehicleFacility: VehicleFacility, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleFacility === null || vehicleFacility === undefined) {
            throw new Error('Required parameter vehicleFacility was null or undefined when calling saveVehicleFacilityUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<VehicleFacility>(`${this.basePath}/vehicle/facility`,
            vehicleFacility,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Save vehicle
     * 
     * @param vehicleFacilityList vehicleFacilityList
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveVehicleUsingPOST(vehicleFacilityList: VehicleFacilityList, observe?: 'body', reportProgress?: boolean): Observable<VehicleFacilityList>;
    public saveVehicleUsingPOST(vehicleFacilityList: VehicleFacilityList, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleFacilityList>>;
    public saveVehicleUsingPOST(vehicleFacilityList: VehicleFacilityList, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleFacilityList>>;
    public saveVehicleUsingPOST(vehicleFacilityList: VehicleFacilityList, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleFacilityList === null || vehicleFacilityList === undefined) {
            throw new Error('Required parameter vehicleFacilityList was null or undefined when calling saveVehicleUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<VehicleFacilityList>(`${this.basePath}/vehicle/vehicle`,
            vehicleFacilityList,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Suspend vehicle
     * 
     * @param transactionRequest transactionRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public suspendVehicleUsingPUT(transactionRequest: TransactionRequest, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;
    public suspendVehicleUsingPUT(transactionRequest: TransactionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;
    public suspendVehicleUsingPUT(transactionRequest: TransactionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;
    public suspendVehicleUsingPUT(transactionRequest: TransactionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (transactionRequest === null || transactionRequest === undefined) {
            throw new Error('Required parameter transactionRequest was null or undefined when calling suspendVehicleUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Vehicle>(`${this.basePath}/vehicle/suspend`,
            transactionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update vehicle facility
     * 
     * @param vehicleFacility vehicleFacility
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateVehicleFacilityUsingPUT(vehicleFacility: VehicleFacility, observe?: 'body', reportProgress?: boolean): Observable<VehicleFacility>;
    public updateVehicleFacilityUsingPUT(vehicleFacility: VehicleFacility, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleFacility>>;
    public updateVehicleFacilityUsingPUT(vehicleFacility: VehicleFacility, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleFacility>>;
    public updateVehicleFacilityUsingPUT(vehicleFacility: VehicleFacility, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleFacility === null || vehicleFacility === undefined) {
            throw new Error('Required parameter vehicleFacility was null or undefined when calling updateVehicleFacilityUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<VehicleFacility>(`${this.basePath}/vehicle/facility`,
            vehicleFacility,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update vehicle
     * 
     * @param vehicleFacilityList vehicleFacilityList
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateVehicleUsingPUT(vehicleFacilityList: VehicleFacilityList, observe?: 'body', reportProgress?: boolean): Observable<VehicleFacilityList>;
    public updateVehicleUsingPUT(vehicleFacilityList: VehicleFacilityList, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleFacilityList>>;
    public updateVehicleUsingPUT(vehicleFacilityList: VehicleFacilityList, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleFacilityList>>;
    public updateVehicleUsingPUT(vehicleFacilityList: VehicleFacilityList, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleFacilityList === null || vehicleFacilityList === undefined) {
            throw new Error('Required parameter vehicleFacilityList was null or undefined when calling updateVehicleUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<VehicleFacilityList>(`${this.basePath}/vehicle/vehicle`,
            vehicleFacilityList,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
