/**
 * Water Solution Inventory Spring Boot App
 * Spring Boot REST API
 *
 * OpenAPI spec version: 1.0
 * Contact: watersolution@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';

import {Observable} from 'rxjs/Observable';

import {Order} from '../model/order';
import {OrderItemsList} from '../model/orderItemsList';
import {OrderList} from '../model/orderList';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class OrderControllerService {

  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  protected basePath = 'https://localhost:8080';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Get orders by orderId
   *
   * @param orderId orderId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getOrderByIdUsingGET(orderId: number, observe?: 'body', reportProgress?: boolean): Observable<Order>;

  public getOrderByIdUsingGET(orderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Order>>;

  public getOrderByIdUsingGET(orderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Order>>;

  public getOrderByIdUsingGET(orderId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (orderId === null || orderId === undefined) {
      throw new Error('Required parameter orderId was null or undefined when calling getOrderByIdUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<Order>(`${this.basePath}/order/${encodeURIComponent(String(orderId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get orders by customerId
   *
   * @param customerId customerId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getOrdersByCustomerUsingGET(customerId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderList>;

  public getOrdersByCustomerUsingGET(customerId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderList>>;

  public getOrdersByCustomerUsingGET(customerId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderList>>;

  public getOrdersByCustomerUsingGET(customerId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (customerId === null || customerId === undefined) {
      throw new Error('Required parameter customerId was null or undefined when calling getOrdersByCustomerUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<OrderList>(`${this.basePath}/order/customer/${encodeURIComponent(String(customerId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Place customer order
   *
   * @param orderItemsList orderItemsList
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public saveCustomerUsingPOST2(orderItemsList: OrderItemsList, observe?: 'body', reportProgress?: boolean): Observable<OrderItemsList>;

  public saveCustomerUsingPOST2(orderItemsList: OrderItemsList, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderItemsList>>;

  public saveCustomerUsingPOST2(orderItemsList: OrderItemsList, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderItemsList>>;

  public saveCustomerUsingPOST2(orderItemsList: OrderItemsList, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (orderItemsList === null || orderItemsList === undefined) {
      throw new Error('Required parameter orderItemsList was null or undefined when calling saveCustomerUsingPOST2.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<OrderItemsList>(`${this.basePath}/order`,
      orderItemsList,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
