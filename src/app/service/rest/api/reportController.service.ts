/**
 * Water Solution Inventory Spring Boot App
 * Spring Boot REST API
 *
 * OpenAPI spec version: 1.0
 * Contact: watersolution@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ReportRequest } from '../model/reportRequest';
import { ReportResponse } from '../model/reportResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReportControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Customer payment report
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public customerPaymentReportUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public customerPaymentReportUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public customerPaymentReportUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public customerPaymentReportUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling customerPaymentReportUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/customer-payment`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delivery report by employee
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deliveryReportByEmployeeUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public deliveryReportByEmployeeUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public deliveryReportByEmployeeUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public deliveryReportByEmployeeUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling deliveryReportByEmployeeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/delivery`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disposal report
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public disposalReportUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public disposalReportUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public disposalReportUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public disposalReportUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling disposalReportUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/disposal`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Order report
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public orderReportUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public orderReportUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public orderReportUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public orderReportUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling orderReportUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/order`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Purchase order report
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public purchaseOrderReportUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public purchaseOrderReportUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public purchaseOrderReportUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public purchaseOrderReportUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling purchaseOrderReportUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/purchase-order`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Purchase report
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public purchaseReportUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public purchaseReportUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public purchaseReportUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public purchaseReportUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling purchaseReportUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/purchase`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sales report
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public salesReportUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public salesReportUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public salesReportUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public salesReportUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling salesReportUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/sale`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Supplier payment report
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public supplierPaymentReportUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public supplierPaymentReportUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public supplierPaymentReportUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public supplierPaymentReportUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling supplierPaymentReportUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/supplier-payment`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Supplier refund report
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public supplierRefundReportUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public supplierRefundReportUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public supplierRefundReportUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public supplierRefundReportUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling supplierRefundReportUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/supplier-refund`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Supplier return report
     * 
     * @param reportRequest reportRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public supplierReturnReportUsingPOST(reportRequest: ReportRequest, observe?: 'body', reportProgress?: boolean): Observable<ReportResponse>;
    public supplierReturnReportUsingPOST(reportRequest: ReportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportResponse>>;
    public supplierReturnReportUsingPOST(reportRequest: ReportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportResponse>>;
    public supplierReturnReportUsingPOST(reportRequest: ReportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportRequest === null || reportRequest === undefined) {
            throw new Error('Required parameter reportRequest was null or undefined when calling supplierReturnReportUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ReportResponse>(`${this.basePath}/report/supplier-return`,
            reportRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
